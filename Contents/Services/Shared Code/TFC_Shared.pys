# General
USER_AGENT = 'Mozilla/5.0 (iPad: CPU OS 10_0 like Mac OS X; en-us) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1'

HTTP.Headers['User-Agent'] = USER_AGENT

# TFC URLs
BASE_URL    = 'http://tfc.tv'
URL_LOGIN   = 'https://tfc.tv/user/login'
URL_LOGOUT  = 'http://tfc.tv/logout'

COOKIES = ''

try:
    DEBUG_LEVEL = int(Prefs['debug_level'])
except:
    DEBUG_LEVEL = 3
        
try:
    CACHE_TIME = int(Prefs['cache_time']) * CACHE_1HOUR
except:
    CACHE_TIME = 0


#####################################################################################################
def Login():

    global COOKIES
    
    #try:
    #    if Prefs['preview']:
    #        COOKIES = ''
    #        return COOKIES
    #except:
    #    pass

    try:

        if DEBUG_LEVEL > 2: Log.Debug(DBG( "URL_LOGIN = %s" % URL_LOGIN ))
        html = HTML.ElementFromURL( URL_LOGIN, cacheTime = 0 )

        try:
            url = html.xpath('//link[@rel="canonical"]/@href')[0]
        except:
            url = ''

        if DEBUG_LEVEL > 2: Log.Debug(DBG( "url = %s" % url ))
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "COOKIES = %s" % COOKIES ))

        if url == BASE_URL + '/' and COOKIES:
            # No need to login
            Log.Debug(DBG( "Already logged in!" ))
            return COOKIES

        # Need to login
        Log.Info(DBG( "Need to login. URL = %s" % url ))
        if DEBUG_LEVEL > 5: Log.Debug(DBG( "html = %s" % HTML.StringFromElement(html) ))

        COOKIES = ''

        token = html.xpath('//input[@name="__RequestVerificationToken"]/@value')[0]
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "__RequestVerificationToken: %s" % str(token) ))
        if DEBUG_LEVEL > 8: Log.Debug(DBG( "EMail: %s" % str(Prefs['email']) ))
        if DEBUG_LEVEL > 8: Log.Debug(DBG( "Password: %s" % str(Prefs['password']) ))
        values = {
                    '__RequestVerificationToken': token,
                    'EMail'                     : Prefs['email'],
                    'Password'                  : Prefs['password'],
                    'submit'                    : 'SUBMIT'
                 }

        HTTP.Headers['Referer'] = URL_LOGIN
        html = HTML.ElementFromURL( URL_LOGIN, values = values, cacheTime=0 )

        if DEBUG_LEVEL > 5: Log.Debug(DBG( "html = %s" % HTML.StringFromElement(html) ))
        
        url = html.xpath('//link[@rel="canonical"]/@href')[0]
        if DEBUG_LEVEL > 1: Log.Debug(DBG( "After login: url = %s" % url ))

        if url == BASE_URL + '/':
            Log.Info(DBG( "Login successful" ))

            COOKIES = HTTP.CookiesForURL( URL_LOGIN )

            # From https://github.com/benaranguren/nuodtayo.tv/blob/master/plugin.video.tfctv/default.py
            cc_fingerprintid = Hash.MD5( Prefs['email'] + str(Util.RandomInt(0, 1000000)) )   
            COOKIES = '%s; cc_fingerprintid=%s;' % (COOKIES, cc_fingerprintid)

            if DEBUG_LEVEL > 3: Log.Debug(DBG( "COOKIES: %s" % str(COOKIES) ))

            return COOKIES
        
    except:
        Log.Error(DBG( "Failed to log in!" ))
        
    raise Ex.MediaNotAvailable


####################################################################################################
def Logout():

    try:

        # Need to logout
        Log.Info(DBG( "Logging out..." ))
        
        html = HTML.ElementFromURL( URL_LOGOUT, cacheTime = 0 )

    except:
        Log.Error(DBG( "Failed to log out!" ))
        raise Ex.MediaNotAvailable


####################################################################################################
def DBG(message):
    
    return "## TFCTV LOG ## %s ##" % str(message)

    
####################################################################################################
def ExtractHtmlText(dict, key, fallback=''):
    try:
        text = String.DecodeHTMLEntities( dict[key] ).strip()
    except: 
        text = fallback
        Log.Debug(DBG( "# Using fallback text: '%s' instead of json['%s'] #" % (fallback,key) ))
    #Log.Debug(DBG( "# ExtractHtmlText: json['%s'] = '%s' #" % (key,text) ))
    return text


####################################################################################################
def ExtractImageUrl(dict, key, fallback):
    try:
        url = str(dict[key])
        url = url.replace(r"http://","")
        url = "http://" + String.Quote(url)
        url = Resource.ContentsOfURLWithFallback( url, fallback=fallback )
    except: 
        url = fallback
        Log.Debug(DBG( "# Using fallback image: '%s' instead of json['%s'] #" % (fallback,key) ))
    #Log.Debug("# ExtractImageUrl: json['%s'] = '%s'#" % (key,url) )
    return url

        
## EOF ##
