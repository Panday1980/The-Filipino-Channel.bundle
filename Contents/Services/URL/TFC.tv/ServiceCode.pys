from TFC_Shared import *

# General
HTTP.Headers['Accept']          = '*/*'
HTTP.Headers['Accept-Encoding'] = 'deflate, gzip'

# Resources
ART      = 'art-default.jpg'
ICON     = 'icon-default.png'
LOGO     = 'TFC-logo.jpg'
MORE     = 'more.png'

# TFC URLs
URL_GET_VIDEO_DETAILS = BASE_URL + '/episode/details/{VIDEO_ID}'
URL_GET_VIDEO         = BASE_URL + '/media/get'

# TFC id URL patterns 
RE_VIDEO_ID = Regex(r"(?P<url>https?://tfc.tv/(episode|live)/details/(?P<video_id>\d+))(/?.*)")

# style="background-image:url(https://timg.tfc.tv/xcms/categoryimages/4046/I-AMERICA-HERO-WEB.jpg);">
RE_MOVIE_BANNER_PATH = Regex(r'background-image:url\((?P<banner_path>[^"]+)\);')

# Regex for parsing m3u8 info
RE_M3U8 = Regex( r"#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=(?P<bandwidth>\d+),RESOLUTION=(?P<width>\d+)x(?P<height>\d+),CODECS=\"(?P<codecs>[^\"]+\")\n(?P<url>https?://\S+)", Regex.MULTILINE )

# Regex for getting URL domain name
RE_DOMAIN = Regex(r"https?://(?P<domain>[^\/]+)")


JSON_HEADERS = dict()
JSON_HEADERS['Accept']           = 'application/json, text/javascript, */*; q=0.01'
JSON_HEADERS['X-Requested-With'] = 'XMLHttpRequest'
JSON_HEADERS['Accept-Language']  = 'en-us'
JSON_HEADERS['Accept-Encoding']  = 'gzip, deflate'
JSON_HEADERS['Content-Type']     = 'application/x-www-form-urlencoded; charset=UTF-8'
JSON_HEADERS['Host']             = 'tfc.tv'
JSON_HEADERS['Origin']           = BASE_URL


####################################################################################################
def NormalizeURL( url ):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "NormalizeURL, url_in  = '%s'" % (url) ))

    m = RE_VIDEO_ID.match( url )        
    if m:
        url = m.group('url')
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "NormalizeURL, url_out = '%s'" % (url) ))
            
    return url

####################################################################################################
def MetadataObjectForURL( url ):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "MetadataObjectForURL, url = '%s'" % (url) ))
        
    try:
    
        html = HTML.ElementFromURL( url, cacheTime = CACHE_TIME )

        title  = html.xpath('//meta[@property="og:title"]/@content')[0]
        title = String.DecodeHTMLEntities( title ).strip()
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "title : %s" % (title) ))

        summary = html.xpath('//meta[@property="og:description"]/@content')[0]
        summary = String.DecodeHTMLEntities( summary ).strip()
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "summary : %s" % (summary[:50]) ))

        image = html.xpath('//meta[@property="og:image"]/@content')[0]
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "image : %s" % (image) ))

        try:
            banner_path = html.xpath('//div[@class="header-hero-image"]/@style')[0]
        except:
            banner_path = ''
        m = RE_MOVIE_BANNER_PATH.search( banner_path )
        if m:
            banner = m.group('banner_path')
        else:
            banner = None
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "banner : %s" % (banner) ))

        '''
        episode = RE_EPISODE_ID.match( url )
        movie   = RE_MOVIE_ID.match( url )
        live    = RE_EPISODE_ID.match( url )
        
        if episode:

            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN EpisodeObject" ))

            return( EpisodeObject(
                             title                   = title,
                             thumb                   = image,
                             summary                 = summary,
                             show                    = title,
                             #season                  = season,
                             #index                   = index,
                             #duration                = duration,
                             #originally_available_at = originally_available_at,
                             art                     = banner
                           ))

        elif movie:

            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN MovieObject" ))

            return( MovieObject(
                             title                   = title,
                             thumb                   = image,
                             summary                 = summary,
                             tagline                 = title,
                             #duration                = duration,
                             #year                    = originally_available_at,
                             art                     = banner
                           ))

        elif live:
        '''
        
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN VideoClipObject" ))

        return( VideoClipObject(
                     title                   = title,
                     thumb                   = image,
                     source_title            = 'TFC.tv',
                     summary                 = summary,
                     #duration                = duration,
                     #originally_available_at = originally_available_at,
                     art                     = banner
                 ))
                 
    except:
        Log.Error(DBG( "MetadataObjectForURL FAILED! url = '%s'" % (url) ))
        raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable


####################################################################################################
def MediaObjectsForURL(url):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "MediaObjectsForURL, url = '%s'" % (url) ))
    return [
		MediaObject(
			parts = [ PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
            optimized_for_streaming = True,
            audio_channels          = 2,
            video_resolution        = 720
            )
        ]


####################################################################################################
@indirect
def PlayVideo( url, **kwargs ):

    try:

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "PlayVideo, url = '%s'" % (url) ))

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "Client.Product: '%s', Client.Platform: '%s'" % (Client.Product,Client.Platform) ))

        # Get the m3u8 playlist url
        playlist_url = GetPlaylistURL( url )

        # Remove bandwidth limitation
        playlist_url = playlist_url.replace('&b=100-1000', '')

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "playlist_url: %s" % playlist_url ))

        # Read the playlist to get the akamai cookies!
        x = HTTP.Request( playlist_url, cacheTime = 0 )
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "playlist: %s" % x.content ))

        # Extract and update cookies
        domain  = RE_DOMAIN.search(playlist_url).group('domain')
        cookies = '%s; path=/; domain=%s;' % (HTTP.CookiesForURL(playlist_url), domain)
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "Final cookies for playlist_url: %s" % cookies ))

        return IndirectResponse( VideoClipObject, key = HTTPLiveStreamURL( url = playlist_url ), http_cookies = cookies )

    except:
        Log.Error(DBG( "PlayVideo(%s) FAILED!" % url ))

    raise Ex.MediaNotAvailable


####################################################################################################
def GetPlaylistURL( url ):

    try:
    
        if DEBUG_LEVEL > 1 : Log.Debug(DBG( "GetPlaylistURL, url = '%s'" % (url) ))

        # Login
        HTTP.Headers['Cookie'] = Login()            
        if DEBUG_LEVEL > 0: Log.Debug(DBG( "GetPlaylistURL::cookies: '%s'" % (HTTP.Headers['Cookie']) ))
        
        # Get episode/movie details
        html = HTML.ElementFromURL( url )

        # Extract video id from URL
        m = RE_VIDEO_ID.match( url )
        if m:
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RE_VIDEO_ID" ))
            video_id = m.group('video_id')
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RE_VIDEO_ID  video_id = %s" % (video_id) ))

        # Extract mediaToken
        amp_script = html.xpath('//script[contains(@src,"/Scripts/amp-")][contains(@src,".js?token=")]/@src')[1]
        mediaToken = amp_script.split('=')[1]
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "mediaToken: %s" % (mediaToken) ))

        if mediaToken:

            JSON_HEADERS['mediaToken'] = mediaToken
            JSON_HEADERS['Referer']    = url
            JSON_HEADERS['Cookie']     = HTTP.Headers['Cookie']

            if HTTP.Headers['Cookie']:
                values = {'id': video_id, 'pv': 'False'}
            else:
                values = {'id': video_id, 'pv': 'True'}
            if DEBUG_LEVEL > 2: Log.Debug(DBG( "values: %s" % (values) ))

            mediaInfo = JSON.ObjectFromURL( URL_GET_VIDEO, values = values, headers = JSON_HEADERS, cacheTime = 0 )

            if DEBUG_LEVEL > 2: Log.Debug(DBG( "JSON:  %s" % mediaInfo ))

            if mediaInfo['StatusCode'] == 1 and mediaInfo['StatusMessage'] == 'OK':
                #and mediaInfo['MediaReturnObj']['UserType'] == 'REGISTERED':
                HTTP.Headers['mediaToken'] = mediaToken
                return mediaInfo['MediaReturnObj']['uri']
            else:
                Log.Error(DBG( "JSON ERROR %s:%s" % (mediaInfo['StatusCode'],mediaInfo['StatusMessage']) ))

        else:
            Log.Error(DBG( "mediaToken not found!" ))


    except:
        raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable

        
## EOF ##
