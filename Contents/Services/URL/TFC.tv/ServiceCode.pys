# General
USER_AGENT = 'Mozilla/5.0 (iPad: CPU OS 10_0 like Mac OS X; en-us) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1'

HTTP.Headers['User-Agent']      = USER_AGENT
HTTP.Headers['Accept']          = '*/*'
HTTP.Headers['Accept-Encoding'] = 'deflate, gzip'

# Resources
ART      = 'art-default.jpg'
ICON     = 'icon-default.png'
LOGO     = 'TFC-logo.jpg'
MORE     = 'more.png'

# TFC URLs
BASE_URL   = 'http://tfc.tv'

# Resources
ART      = 'art-default.jpg'
ICON     = 'icon-default.png'


URL_LOGIN = 'https://tfc.tv/user/login'

URL_GET_VIDEO_DETAILS = BASE_URL + '/episode/details/{VIDEO_ID}'
URL_GET_VIDEO         = BASE_URL + '/media/get'

# Consctructed URLs for URL service
RE_PLEX_MOVIE_URL   = Regex( r"^tfctv://(?P<movie_id>\d+)$" )
RE_PLEX_EPISODE_URL = Regex( r"^tfctv://(?P<show_id>\d+)/(?P<episode_id>\d+)$" )

# style="background-image:url(https://timg.tfc.tv/xcms/categoryimages/4046/I-AMERICA-HERO-WEB.jpg);">
RE_MOVIE_BANNER_PATH = Regex(r'background-image:url\((?P<banner_path>[^"]+)\);')

# Regex for parsing m3u8 info
RE_M3U8 = Regex( r"#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=(?P<bandwidth>\d+),RESOLUTION=(?P<width>\d+)x(?P<height>\d+),CODECS=\"(?P<codecs>[^\"]+\")\n(?P<url>https?://\S+)", Regex.MULTILINE )

# Regex for getting URL domain name
RE_DOMAIN = Regex(r"https?://(?P<domain>[^\/]+)")

# Set default cache to 3 hours
CACHE_TIME = 3 * CACHE_1HOUR

COOKIES = ''


####################################################################################################
def MetadataObjectForURL( url ):

    Log.Debug('# ServiceCode **********  MetadataObjectForURL  ********** %s', url )

    try:

        movie = RE_PLEX_MOVIE_URL.match( url )
        if movie:
            Log.Debug('# **********  RE_PLEX_MOVIE_URL  ********** ' )
            video_id = movie.group('movie_id')
            Log.Debug('# **********  RE_PLEX_MOVIE_URL  movie_id = %s', video_id )

        episode = RE_PLEX_EPISODE_URL.match( url )
        if episode:
            Log.Debug('# **********  RE_PLEX_EPISODE_URL  ********** ' )
            video_id = episode.group('episode_id')
            Log.Debug('# **********  RE_PLEX_EPISODE_URL  episode_id = %s', video_id )

        if movie or episode:

            html = HTML.ElementFromURL( URL_GET_VIDEO_DETAILS.replace('{VIDEO_ID}',str(video_id)), cacheTime = CACHE_TIME )

            title  = html.xpath('//meta[@property="og:title"]/@content')[0]
            title = String.DecodeHTMLEntities( title ).strip()
            Log.Debug( "#### title : %s ####" % (title)  )

            summary = html.xpath('//meta[@property="og:description"]/@content')[0]
            summary = String.DecodeHTMLEntities( summary ).strip()
            Log.Debug( "#### summary : %s ####" % (summary)  )

            image = html.xpath('//meta[@property="og:image"]/@content')[0]
            Log.Debug( "#### image : %s ####" % (image)  )

            try:
                banner_path = html.xpath('//div[@class="header-hero-image"]/@style')[0]
            except:
                banner_path = ''
            m = RE_MOVIE_BANNER_PATH.search( banner_path )
            if m:
                banner = m.group('banner_path')
            else:
                banner = None
            Log.Debug( "#### banner : %s ####", banner )

        if movie:

            Log.Debug('# RETURN MovieObject #' )

            return( MovieObject(
                             title                   = title,
                             thumb                   = image,
                             summary                 = summary,
                             tagline                 = title,
                             #duration                = duration,
                             #year                    = originally_available_at,
                             art                     = banner
                           ))

        if episode:

            Log.Debug('# RETURN EpisodeObject #' )

            return( EpisodeObject(
                             title                   = title,
                             thumb                   = image,
                             summary                 = summary,
                             show                    = title,
                             #season                  = season,
                             #index                   = index,
                             #duration                = duration,
                             #originally_available_at = originally_available_at,
                             art                     = banner
                           ))

    except:
        Log.Debug( '******************************* MetadataObjectForURL FAILED ! *******************************' )
        raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable


####################################################################################################
def MediaObjectsForURL(url):

    #Log.Debug( '******************************* MediaObjectsForURL *******************************' )
    #Log.Debug( "Client.Product: '%s', Client.Platform: '%s'" % (Client.Product,Client.Platform) )
    return [
		MediaObject(
			parts = [ PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
            optimized_for_streaming = True,
            audio_channels          = 2,
            video_resolution        = 720
            )
        ]


####################################################################################################
@indirect
def PlayVideo( url, **kwargs ):

    try:

        Log.Debug( '******************************* PlayVideo(%s) *******************************', url )

        movie = RE_PLEX_MOVIE_URL.match( url )
        if movie:
            Log.Debug('# **********  RE_PLEX_MOVIE_URL  ********** ' )
            video_id = movie.group('movie_id')
            Log.Debug('# **********  RE_PLEX_MOVIE_URL  movie_id = %s', video_id )

        episode = RE_PLEX_EPISODE_URL.match( url )
        if episode:
            Log.Debug('# **********  RE_PLEX_EPISODE_URL  ********** ' )
            video_id = episode.group('episode_id')
            Log.Debug('# **********  RE_PLEX_EPISODE_URL  episode_id = %s', video_id )

        if movie or episode:

            Log.Debug( '## video_id: %s ##', video_id )

            cookies = GetCookies()

            # Get the m3u8 playlist url
            playlist_url = GetPlaylistURL( video_id, cookies )
            Log.Debug( '## playlist_url: %s ##', playlist_url )

            # Read the playlist to get the akamai cookies!
            x = HTTP.Request( url = playlist_url, cacheTime = 0 )
            Log.Debug( '## playlist: %s ##', x.content )

            # Extract and update cookies
            domain  = RE_DOMAIN.search(playlist_url).group('domain')
            cookies = '%s; path=/; domain=%s;' % (HTTP.CookiesForURL(playlist_url), domain)
            #Log.Debug( '## Final cookies for playlist_url: %s ##', cookies )

            return IndirectResponse( VideoClipObject, key = HTTPLiveStreamURL( url = playlist_url ), http_cookies = cookies )

    except:
        Log.Debug( '** PlayVideo(%s) FAILED! **', url )

    raise Ex.MediaNotAvailable


####################################################################################################
def GetPlaylistURL( video_id, cookies ):

    try:

        url = URL_GET_VIDEO_DETAILS.replace('{VIDEO_ID}',str(video_id))

        # Get episode details
        HTTP.Headers['Cookie'] = cookies
        html = HTML.ElementFromURL( url )

        # Extract mediaToken
        amp_script = html.xpath('//script[contains(@src,"/Scripts/amp-")][contains(@src,".js?token=")]/@src')[1]
        mediaToken = amp_script.split('=')[1]
        #Log.Debug('##### mediaToken: %s' % (mediaToken) )

        if mediaToken:

            json_headers = dict()
            json_headers['Accept'] = 'application/json, text/javascript, */*; q=0.01'
            json_headers['X-Requested-With'] = 'XMLHttpRequest'
            json_headers['Accept-Language'] = 'en-us'
            json_headers['mediaToken'] = mediaToken
            json_headers['Accept-Encoding'] = 'gzip, deflate'
            json_headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
            json_headers['Host'] = 'tfc.tv'
            json_headers['Origin'] = BASE_URL
            json_headers['Referer'] = url
            json_headers['Cookie'] = cookies

            values = {'id': video_id, 'pv': 'False'}
            #values = {'id': video_id, 'pv': 'True'}

            #Log.Debug( '\n## before JSON.ObjectFromURL json_headers: %s ##\n', json_headers )
            #Log.Debug( '\n## before JSON.ObjectFromURL values: %s ##\n', values )

            mediaInfo = JSON.ObjectFromURL( URL_GET_VIDEO, values = values, headers = json_headers, cacheTime = 0 )

            Log.Debug('@#$ \n\nJSON:  %s\n\n ' % mediaInfo )

            #Log.Debug( '## after JSON.ObjectFromURL json_headers: %s ##\n', json_headers )

            if mediaInfo['StatusCode'] == 1 and mediaInfo['StatusMessage'] == 'OK' and mediaInfo['MediaReturnObj']['UserType'] == 'REGISTERED':
                HTTP.Headers['mediaToken'] = mediaToken
                return mediaInfo['MediaReturnObj']['uri']
            else:
                Log.Error('### JSON ERROR %s:%s ###', mediaInfo['StatusCode'], mediaInfo['StatusMessage'] )

        else:
            Log.Error('### mediaToken not found! ###' )


    except:
        raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable



####################################################################################################
def GetCookies():

    global COOKIES

    try:
    
        html = HTML.ElementFromURL( URL_LOGIN, cacheTime = 0 )

        try:
            url = html.xpath('//meta[@property="og:url"]/@content')[0]
        except:
            url = ''

        if url == BASE_URL + '/' and COOKIES:
            # No need to login
            Log.Debug( '# Already logged in! # ' )
            return COOKIES

        # Need to login
        Log.Debug( '# Need to login... #' )

        COOKIES = ''

        if not ( Prefs['email'] and Prefs['password'] ) :
            Log.Debug('# Missing prefs. #' )
            raise Ex.MediaNotAvailable

        token = html.xpath('//input[@name="__RequestVerificationToken"]/@value')[0]
        #Log.Debug( '## __RequestVerificationToken: %s ##' % str(token) )
        values = {
                    '__RequestVerificationToken': token,
                    'EMail'                     : Prefs['email'],
                    'Password'                  : Prefs['password']
                 }

        HTTP.Headers['Referer'] = URL_LOGIN
        html = HTML.ElementFromURL( URL_LOGIN, values = values, cacheTime=0 )

        url = html.xpath('//meta[@property="og:url"]/@content')[0]
        if url == BASE_URL + '/':
            Log.Debug( '# Login successful #' )

            COOKIES = HTTP.CookiesForURL( URL_LOGIN )

            # From https://github.com/benaranguren/nuodtayo.tv/blob/master/plugin.video.tfctv/default.py
            cc_fingerprintid = Hash.MD5( Prefs['email'] )
            COOKIES = '%s; cc_fingerprintid=%s;' % (COOKIES, cc_fingerprintid)

            Log.Debug( '## COOKIES: %s ##' % str(COOKIES) )

            return COOKIES
        
    except:
        Log( '## Failed to login!: #' )
        
    raise Ex.MediaNotAvailable



####################################################################################################
def ExtractHtmlText(dict, key, fallback=''):
    try:
        text = String.DecodeHTMLEntities( dict[key] ).strip()
    except: 
        text = fallback
        Log.Debug("# Using fallback text: '%s' instead of json['%s'] #" % (fallback,key) )
    #Log.Debug("# ExtractHtmlText: json['%s'] = '%s' #" % (key,text) )
    return text


####################################################################################################
def ExtractImageUrl(dict, key, fallback):
    try:
        url = str(dict[key])
        url = url.replace(r"http://","")
        url = "http://" + String.Quote(url)
        url = Resource.ContentsOfURLWithFallback( url, fallback=fallback )
    except: 
        url = fallback
        Log.Debug("# Using fallback image: '%s' instead of json['%s'] #" % (fallback,key) )
    #Log.Debug("# ExtractImageUrl: json['%s'] = '%s'#" % (key,url) )
    return url

        
## EOF ##
